using DVLDataAccessLayar;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DVLDDataAccessLayar
{
    public class clsUsersDataAccesslayar
    {
        static public DataTable GetAllUsers()
        {
            DataTable Users= new DataTable();
            SqlConnection Connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = @"
						 SELECT
    Users.UserID,
    Users.PersonID,
    CONCAT(
        People.FirstName,
        ' ',
        People.SecondName,
        ' ',
        CASE
            WHEN People.ThirdName IS NULL THEN ''
            ELSE People.ThirdName + ' '
        END,
        People.LastName
    ) AS FullName,
    Users.UserName,
    Users.IsActive
FROM People
INNER JOIN Users ON People.PersonID = Users.PersonID;


";

            SqlCommand Command = new SqlCommand(Query, Connection);

            try
            {
                Connection.Open();

                SqlDataReader reader = Command.ExecuteReader();

                if(reader.HasRows)
                {
                    Users.Load(reader);
                }
                reader.Close();
            }
            catch (Exception ex) { }
            finally { Connection.Close(); }
            return Users;
        }

        static public bool Find(ref int UserID,string UserName,ref string Password,ref bool IsActive,ref int PersonID)
        {
            bool IsFound = false;
            SqlConnection Connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = "SELECT * FROM Users WHERE UserName=@UserName";

            SqlCommand Command= new SqlCommand(Query, Connection);
            Command.Parameters.AddWithValue("@UserName", UserName);

            try
            {
                Connection.Open();

                SqlDataReader reader = Command.ExecuteReader();

                while(reader.Read())
                {
                    IsFound = true;
                    UserID = (int)reader["UserID"];
                    Password = (string)reader["Password"];
                    IsActive = reader.GetBoolean(reader.GetOrdinal("IsActive"));
                    PersonID = (int)reader["PersonID"];
                }
            }
            catch(Exception ex) { }
            finally { Connection.Close(); }

            return IsFound;

        }

        static public bool Find(int UserID,ref string UserName,ref string Password , ref bool IsActive,ref int PersonID)
        {
            bool IsFound = false;

            SqlConnection Connection = new SqlConnection(clsDataAccessSittings.ConnectionString);


            string Query = "SELECT * FROM Users WHERE UserID=@UserID";

            SqlCommand command = new SqlCommand(Query, Connection);
            command.Parameters.AddWithValue("@UserID", UserID);

            try
            {
                Connection.Open();

                SqlDataReader reader = command.ExecuteReader();

                while(reader.Read())
                {
                    IsFound = true;
                    UserName = (string)reader["UserName"];
                    Password = (string)reader["Password"];
                    IsActive = reader.GetBoolean(reader.GetOrdinal("IsActive"));
                    PersonID = (int)reader["PersonID"];
                }

                reader.Close();
            }
            catch(Exception ex) { }
            finally {  Connection.Close(); }

            return IsFound;
        }


        static public int AddNewUser(string UserName,string Password,bool IsActive,int PersonID)
        {
            int IsAdded = -1;

            SqlConnection Connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = @"INSERT INTO Users VALUES(@PersonID,@UserName,@Password,@IsActive);select SCOPE_IDENTITY();";

            SqlCommand command = new SqlCommand(Query, Connection);
            command.Parameters.AddWithValue("@PersonID", PersonID);
            command.Parameters.AddWithValue("@UserName", UserName);
            command.Parameters.AddWithValue("@Password", Password);

            if (IsActive)
                command.Parameters.AddWithValue("@IsActive", 1);
            else
                command.Parameters.AddWithValue("@IsActive", 0);


            try
            {
                Connection.Open();

                object Scop_Identity = command.ExecuteScalar();

                if(int.TryParse(Scop_Identity.ToString(),out int Result))
                {
                    IsAdded = Result;
                }
            }
            catch(Exception ex) {}
            finally { Connection.Close(); }

            return IsAdded;

            // true : means user added seccesfully
            //fasle : there is a problem
        }

        static public bool DeleteUser(int UserId)
        {
            int RowsAffected = 0;

            SqlConnection Connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = @"DELETE FROM Users WHERE userID = @Userid";

            SqlCommand Command = new SqlCommand(Query,Connection);
            Command.Parameters.AddWithValue("@Userid", UserId);

            try
            {
                Connection.Open();

                RowsAffected = Command.ExecuteNonQuery();
            }
            catch (Exception ex) { }
            finally { Connection.Close(); }

            return RowsAffected > 0;
        }

        static public int UpdateUserInfo(int UserID,string UserName, string Password, bool IsActive, int PersonID)
        {
            int RowsAffected = -1;

            SqlConnection Connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = @"
                                    UPDATE Users
                                   SET PersonID = @PersonID
                                      ,UserName = @UserName
                                      ,Password = @Password
                                      ,IsActive = @IsActive
                                       WHERE UserID=@UserID";

            SqlCommand Command=new SqlCommand(Query,Connection);
            Command.Parameters.AddWithValue("@PersonID", PersonID);
            Command.Parameters.AddWithValue("@UserName", UserName);
            Command.Parameters.AddWithValue("@Password", Password);
            Command.Parameters.AddWithValue("@UserID", UserID);

            if(IsActive)    
                Command.Parameters.AddWithValue("@IsActive", 1);
            else
                Command.Parameters.AddWithValue("@IsActive", 0);


            try
            {
                Connection.Open();

                RowsAffected = Command.ExecuteNonQuery();

            }
            catch(Exception ex) { }
            finally { Connection.Close(); }

            return RowsAffected;
        }

        static public bool IsExists(int UserID)
        {
            bool IsExist = false;
            SqlConnection Connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = @"SELECT Found=1 FROM Users WHERE UserID=@UserID";

            SqlCommand Command = new SqlCommand(Query, Connection);
            Command.Parameters.AddWithValue("@UserID", UserID);

            try
            {
                Connection.Open();

                SqlDataReader reader = Command.ExecuteReader();

                if (reader.HasRows)
                    IsExist = true;

            }
            catch (Exception e) { } 
            finally { Connection.Close(); }

            return IsExist;

        }

        static public bool IsExistsByPersonID(int PersonID)
        {
            bool IsExist = false;
            SqlConnection Connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = @"SELECT Found=1 FROM Users WHERE PersonID=@PersonID";

            SqlCommand Command = new SqlCommand(Query, Connection);
            Command.Parameters.AddWithValue("@PersonID", PersonID);

            try
            {
                Connection.Open();

                SqlDataReader reader = Command.ExecuteReader();

                if (reader.HasRows)
                    IsExist = true;

            }
            catch (Exception e) { }
            finally { Connection.Close(); }

            return IsExist;

        }

    }
}
