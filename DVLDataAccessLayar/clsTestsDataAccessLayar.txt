using DVLDataAccessLayar;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DVLDDataAccessLayar
{
    public class clsTestsDataAccessLayar
    {
        static public bool Find(int AppointmentID,ref int TestID,ref bool TestResult,ref string Notes,ref int CreatedByUser)
        {
            bool IsFound = false;

            SqlConnection connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = "SELECT *FROM Tests WHERE TestAppointmentID=@AppointmentID";

            SqlCommand command=new SqlCommand(Query, connection);
            command.Parameters.AddWithValue("@AppointmentID", AppointmentID);

            try
            {
              
                connection.Open();

                SqlDataReader reader = command.ExecuteReader();

                while(reader.Read())
                {
                    IsFound = true;

                    TestID = (int)reader["TestID"];
                    TestResult = (bool)reader["TestResult"];
                    Notes = (string)reader["Notes"];
                    CreatedByUser = (int)reader["CreatedByUserID"];
                }
                reader.Close();
            }
            catch (Exception ex) { }
            finally { connection.Close(); }


            return IsFound;
        }

        static public int InsertTestRecord(int TestAppointmentID,bool TestResult,string Notes,int CreatedByUserID)
        {
            int TestID = -1;

            SqlConnection connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = @"INSERT INTO Tests
                                VALUES
                                (@TestAppointmentID
                                ,@TestResult
                                ,@Notes
                                ,@CreatedByUserID)SELECT SCOPE_IDENTITY();";


            SqlCommand command= new SqlCommand(Query, connection);
            command.Parameters.AddWithValue("@TestAppointmentID", TestAppointmentID);
            command.Parameters.AddWithValue("@TestResult", TestResult);
            if (string.IsNullOrEmpty(Notes))
                command.Parameters.AddWithValue("@Notes", System.DBNull.Value);
            else
                command.Parameters.AddWithValue("@Notes", Notes);

            command.Parameters.AddWithValue("@CreatedByUserID", CreatedByUserID);

            try
            {
                connection.Open();

                object obj = command.ExecuteScalar();

                if (int.TryParse(obj.ToString(), out int ID))
                    TestID = ID;
            }
            catch (Exception ex) { }
            finally { connection.Close(); }

            return TestID;
        }

        static public bool IsPersonPassedTest(int LocalDrivingLicenseApplicationID, int TestType)
        {
            Object Field = null;

            SqlConnection connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = @"
                        select Test=1
                        from(
                        SELECT        Tests.TestResult, LocalDrivingLicenseApplications.LocalDrivingLicenseApplicationID, TestTypes.TestTypeID
                        FROM            TestAppointments INNER JOIN
                                                 Tests ON TestAppointments.TestAppointmentID = Tests.TestAppointmentID INNER JOIN
                                                 LocalDrivingLicenseApplications ON TestAppointments.LocalDrivingLicenseApplicationID = 
                        						 LocalDrivingLicenseApplications.LocalDrivingLicenseApplicationID INNER JOIN
                                                 TestTypes ON TestAppointments.TestTypeID = TestTypes.TestTypeID)R1
                        						 Where (R1.LocalDrivingLicenseApplicationID=@LocalDrivingLicenseApplicationID and R1.TestResult=1 and R1.TestTypeID = @TestType)";

            SqlCommand command = new SqlCommand(Query, connection);
            command.Parameters.AddWithValue("@LocalDrivingLicenseApplicationID", LocalDrivingLicenseApplicationID);
            command.Parameters.AddWithValue("@TestType", TestType);

            try
            {
                connection.Open();

                Field = command.ExecuteScalar();
            }
            catch (Exception ex) { }
            finally { connection.Close(); }


            return Field != null;
            //True : found
            //False : NotFound

        }
    }
}
