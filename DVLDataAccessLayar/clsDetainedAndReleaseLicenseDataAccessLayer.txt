using DVLDataAccessLayar;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DVLDDataAccessLayar
{
    public class clsDetainedAndReleaseLicenseDataAccessLayer
    {

        static public DataTable GetAllDetained()
        {

            DataTable dt = new DataTable();

            SqlConnection connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = @"SELECT        DetainedLicenses.DetainID, DetainedLicenses.LicenseID, DetainedLicenses.IsReleased, DetainedLicenses.FineFees, DetainedLicenses.ReleaseDate, People.NationalNo, 
                         People.FirstName + ' ' + People.SecondName + ' ' + People.ThirdName + ' ' + People.LastName AS 'FullName'
FROM            Drivers INNER JOIN
                         People ON Drivers.PersonID = People.PersonID INNER JOIN
                         Licenses ON Drivers.DriverID = Licenses.DriverID INNER JOIN
                         DetainedLicenses ON Licenses.LicenseID = DetainedLicenses.LicenseID";

            SqlCommand command = new SqlCommand(Query, connection);

            try
            {
                connection.Open();

                SqlDataReader reader = command.ExecuteReader();

                if (reader.HasRows)
                    dt.Load(reader);
            }
            catch (Exception ex) { }
            finally { connection.Close(); }

            return dt;
        }

        static public bool Find(int DetainID
                         , ref int LicenseID
                         , ref DateTime DetainDate
                         , ref decimal FineFees
                         , ref int CreatedByUserID
                         , ref bool IsReleased
                         , ref DateTime ReleaseDate
                         , ref int ReleasedByUserID
                         , ref int ReleaseApplicationID)
        {
            bool IsFound = false;

            SqlConnection connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = @"SELECT * FROM DetainedLicenses WHERE DetainID=@DetainID";

            SqlCommand command = new SqlCommand(Query, connection);
            command.Parameters.AddWithValue("@DetainID", DetainID);

            try
            {
                connection.Open();

                SqlDataReader reader = command.ExecuteReader();

                while (reader.Read())
                {
                    IsFound = true;

                    LicenseID = (int)reader["LicenseID"];
                    DetainDate = (DateTime)reader["DetainDate"];
                    FineFees = (decimal)reader["FineFees"];
                    CreatedByUserID = (int)reader["CreatedByUserID"];
                    IsReleased = (bool)reader["IsReleased"];

                    if (reader["ReleaseDate"] != DBNull.Value)
                        ReleaseDate = (DateTime)reader["ReleaseDate"];
                    else
                        ReleaseDate = DateTime.Now;
                    if (reader["ReleasedByUserID"] != DBNull.Value)
                        ReleasedByUserID = (int)reader["ReleasedByUserID"];
                    else
                        ReleasedByUserID = 0;
                    if (reader["ReleaseApplicationID"] != DBNull.Value)
                        ReleaseApplicationID = (int)reader["ReleaseApplicationID"];
                    else
                        ReleaseApplicationID = 0;
                }

                reader.Close();
            }
            catch (Exception e) { }
            finally { connection.Close(); }

            return IsFound;

        }

        static public bool Find(ref int DetainID
                        , ref int LicenseID
                        , ref DateTime DetainDate
                        , ref decimal FineFees
                        , ref int CreatedByUserID
                        , ref bool IsReleased
                        , ref DateTime ReleaseDate
                        , ref int ReleasedByUserID
                        , int ReleaseApplicationID)
        {
            bool IsFound = false;

            SqlConnection connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = @"SELECT * FROM DetainedLicenses WHERE ReleaseApplicationID=@ReleaseApplicationID";

            SqlCommand command = new SqlCommand(Query, connection);
            command.Parameters.AddWithValue("@ReleaseApplicationID", ReleaseApplicationID);

            try
            {
                connection.Open();

                SqlDataReader reader = command.ExecuteReader();

                while (reader.Read())
                {

                    IsFound = true;

                    DetainID = (int)reader["DetainID"];
                    LicenseID = (int)reader["LicenseID"];
                    DetainDate = (DateTime)reader["DetainDate"];
                    FineFees = (decimal)reader["FineFees"];
                    CreatedByUserID = (int)reader["CreatedByUserID"];
                    IsReleased = (bool)reader["IsReleased"];

                    if (reader["ReleaseDate"] != DBNull.Value)
                        ReleaseDate = (DateTime)reader["ReleaseDate"];
                    else
                        ReleaseDate = DateTime.Now;
                    if (reader["ReleasedByUserID"] != DBNull.Value)
                        ReleasedByUserID = (int)reader["ReleasedByUserID"];
                    else
                        ReleasedByUserID = 0;
                    if (reader["ReleaseApplicationID"] != DBNull.Value)
                        ReleaseApplicationID = (int)reader["ReleaseApplicationID"];
                    else
                        ReleaseApplicationID = 0;
                }

                reader.Close();
            }
            catch (Exception e) { }
            finally { connection.Close(); }

            return IsFound;

        }

        static public bool Find(ref int DetainID
                      , int LicenseID
                      , ref DateTime DetainDate
                      , ref decimal FineFees
                      , ref int CreatedByUserID
                      , ref bool IsReleased
                      , ref DateTime ReleaseDate
                      , ref int ReleasedByUserID
                      , ref int ReleaseApplicationID)
        {
            bool IsFound = false;

            SqlConnection connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = @"SELECT *FROM DetainedLicenses WHERE (LicenseID=@LicenseID AND IsReleased=0)";

            SqlCommand command = new SqlCommand(Query, connection);
            command.Parameters.AddWithValue("@LicenseID", LicenseID);

            try
            {
                connection.Open();

                SqlDataReader reader = command.ExecuteReader();

                while (reader.Read())
                {

                    IsFound = true;

                    DetainID = (int)reader["DetainID"];
                    DetainDate = (DateTime)reader["DetainDate"];
                    FineFees = (decimal)reader["FineFees"];
                    CreatedByUserID = (int)reader["CreatedByUserID"];
                    IsReleased = (bool)reader["IsReleased"];

                    if (reader["ReleaseDate"] != DBNull.Value)
                        ReleaseDate = (DateTime)reader["ReleaseDate"];
                    else
                        ReleaseDate = DateTime.Now;
                    if (reader["ReleasedByUserID"] != DBNull.Value)
                        ReleasedByUserID = (int)reader["ReleasedByUserID"];
                    else
                        ReleasedByUserID = 0;
                    if (reader["ReleaseApplicationID"] != DBNull.Value)
                        ReleaseApplicationID = (int)reader["ReleaseApplicationID"];
                    else
                        ReleaseApplicationID = 0;
                }

                reader.Close();
            }
            catch (Exception e) { }
            finally { connection.Close(); }

            return IsFound;

        }


        static public int DetainLicense(int LicenseID, DateTime DetainDate, decimal FineFees, int CreatedByUserID, bool IsReleased)
        {
            int DetainLicenseID = -1;

            SqlConnection connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = @"
                                INSERT INTO DetainedLicenses
                                     VALUES
                                           (@LicenseID
                                           ,@DetainDate
                                           ,@FineFees
                                           ,@CreatedByUserID
                                           ,@IsReleased
                                           ,null
		                                   ,null
		                                   ,null);
                                		   SELECT SCOPE_IDENTITY();";

            SqlCommand command = new SqlCommand(Query, connection);
            command.Parameters.AddWithValue("@LicenseID", LicenseID);
            command.Parameters.AddWithValue("@DetainDate", DetainDate);
            command.Parameters.AddWithValue("@FineFees", FineFees);
            command.Parameters.AddWithValue("@CreatedByUserID", CreatedByUserID);
            command.Parameters.AddWithValue("@IsReleased", IsReleased);

            try
            {
                connection.Open();

                object obj = command.ExecuteScalar();

                if (int.TryParse(obj.ToString(), out int ID))
                {
                    DetainLicenseID = ID;
                }
            }
            catch (Exception ex) { }
            finally { connection.Close(); }


            return DetainLicenseID;
        }


        static public bool ReleasLicense(int DetainedID, DateTime ReleaseDate, int ReleasedByUserID, int ReleaseApplicationID)
        {
            bool IsReleased = false;

            SqlConnection connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = @"
                                    UPDATE DetainedLicenses
                                    SET IsReleased = 1 , ReleaseDate =@ReleaseDate ,ReleasedByUserID =@ReleasedByUserID ,ReleaseApplicationID =@ReleaseApplicationID 
                                    WHERE DetainID=@DetainedID";

            SqlCommand command = new SqlCommand(Query, connection);
            command.Parameters.AddWithValue("@ReleaseDate", ReleaseDate);
            command.Parameters.AddWithValue("@ReleasedByUserID", ReleasedByUserID);
            command.Parameters.AddWithValue("@ReleaseApplicationID", ReleaseApplicationID);
            command.Parameters.AddWithValue("@DetainedID", DetainedID);

            try
            {
                connection.Open();

                int RowAffected = command.ExecuteNonQuery();

                if (RowAffected > 0)
                    IsReleased = true;
            }
            catch (Exception ex) { }
            finally { connection.Close(); }

            return IsReleased;
        }

        static public bool IsLicenseDetained(int LicenseID)
        {
            bool IsDetained = false;

            SqlConnection connection = new SqlConnection(clsDataAccessSittings.ConnectionString);


            string Query = @"SELECT *FROM(SELECT 
                                        CASE IsReleased
                                        	WHEN 0 THEN 'TRUE'
                                        	WHEN 1 THEN 'FALSE'
                                        	END	AS RESULT
                                        from DetainedLicenses where LicenseID = @LicenseID)R1
										WHERE R1.RESULT = 'TRUE'";

            SqlCommand command = new SqlCommand(Query, connection);
            command.Parameters.AddWithValue("@LicenseID", LicenseID);

            try
            {
                connection.Open();

                object obj = command.ExecuteScalar();

                if ((string)obj == "TRUE")
                    IsDetained = true;

            }
            catch (Exception e) { }
            finally { connection.Close(); }

            return IsDetained;
        }
    }
}
