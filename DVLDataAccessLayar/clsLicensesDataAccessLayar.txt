using DVLDataAccessLayar;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DVLDDataAccessLayar
{
    public class clsLicensesDataAccessLayar
    {
        /*
         * 
         *                                                      
                                                    ApplicationID
                                                    DriverID
                                                    LicenseClass
                                                    IssueDate
                                                    ExpirationDate
                                                    Notes
                                                    PaidFees
                                                    IsActive
                                                    IssueReason
                                                    CreatedByUserID
         */

        static public int AddNewLicense(int ApplicationID,int DriverID,int LicenseClass,DateTime IssueDate,DateTime ExpirationDate,string Notes,decimal PaidFees,bool IsActive,int IssueReason,int CreatedByUserID)
        {
            int LicenseID = -1;

            SqlConnection connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = @"INSERT INTO Licenses VALUES
                                                            (@ApplicationID
                                                            ,@DriverID
                                                            ,@LicenseClass
                                                            ,@IssueDate
                                                            ,@ExpirationDate
                                                            ,@Notes
                                                            ,@PaidFees
                                                            ,@IsActive
                                                            ,@IssueReason
                                                            ,@CreatedByUserID);SELECT SCOPE_IDENTITY();";

            SqlCommand command = new SqlCommand(Query, connection);
            command.Parameters.AddWithValue("@ApplicationID", ApplicationID);
            command.Parameters.AddWithValue("@DriverID", DriverID);
            command.Parameters.AddWithValue("@LicenseClass", LicenseClass);
            command.Parameters.AddWithValue("@IssueDate", IssueDate);
            command.Parameters.AddWithValue("@ExpirationDate", ExpirationDate);
            if (string.IsNullOrEmpty(Notes))
                command.Parameters.AddWithValue("@Notes", System.DBNull.Value);
            else
                command.Parameters.AddWithValue("@Notes", Notes);

            command.Parameters.AddWithValue("@PaidFees", PaidFees);
            command.Parameters.AddWithValue("@IsActive", IsActive);
            command.Parameters.AddWithValue("@IssueReason", IssueReason);
            command.Parameters.AddWithValue("@CreatedByUserID", CreatedByUserID);
  
            try
            {
                connection.Open();

                object Field = command.ExecuteScalar();

                if(int.TryParse(Field.ToString(),out int ID))
                {
                    LicenseID = ID;
                }
            }
            catch (Exception ex) { }
            finally { connection.Close(); }

            return LicenseID;
        }

        static public bool Find(int LicenseID,ref int ApplicationID,ref  int DriverID,ref int LicenseClass,ref DateTime IssueDate,ref DateTime ExpirationDate,ref string Notes,ref decimal PaidFees,ref bool IsActive,ref byte IssueReason,ref int CreatedByUserID)
        {
            bool IsFound = false;

            SqlConnection connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = "SELECT *FROM Licenses WHERE LicenseID=@LicenseID;";

            SqlCommand command = new SqlCommand(Query, connection);

            command.Parameters.AddWithValue("@LicenseID", LicenseID);

            try
            {
                connection.Open();

                SqlDataReader reader = command.ExecuteReader();


                while(reader.Read())
                {
                    IsFound = true;
                    ApplicationID = (int)reader["ApplicationID"];
                    DriverID = (int)reader["DriverID"];
                    LicenseClass = (int)reader["LicenseClass"];
                    IssueDate = (DateTime)reader["IssueDate"];
                    ExpirationDate = (DateTime)reader["ExpirationDate"];
                    if (reader["Notes"] != DBNull.Value)
                        Notes = (string)reader["Notes"];
                    else
                        Notes = string.Empty;
                    PaidFees = (decimal)reader["PaidFees"];
                    IsActive = (bool)reader["IsActive"];
                    IssueReason = (byte)reader["IssueReason"];
                    CreatedByUserID = (int)reader["CreatedByUserID"];
                }
                reader.Close();
            }
            catch (Exception ex) { }
            finally { connection.Close(); }

            return IsFound;
        }

        static public bool Find(ref int LicenseID, int ApplicationID, ref int DriverID, ref int LicenseClass, ref DateTime IssueDate, ref DateTime ExpirationDate, ref string Notes, ref decimal PaidFees, ref bool IsActive, ref byte IssueReason, ref int CreatedByUserID)
        {
            bool IsFound = false;

            SqlConnection connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = "SELECT *FROM Licenses WHERE ApplicationID=@ApplicationID;";

            SqlCommand command = new SqlCommand(Query, connection);

            command.Parameters.AddWithValue("@ApplicationID", ApplicationID);

            try
            {
                connection.Open();

                SqlDataReader reader = command.ExecuteReader();


                while (reader.Read())
                {
                    IsFound = true;
                    LicenseID = (int)reader["LicenseID"];
                    DriverID = (int)reader["DriverID"];
                    LicenseClass = (int)reader["LicenseClass"];
                    IssueDate = (DateTime)reader["IssueDate"];
                    ExpirationDate = (DateTime)reader["ExpirationDate"];
                    if (reader["Notes"] != DBNull.Value)
                        Notes = (string)reader["Notes"];
                    else
                        Notes = string.Empty;
                    PaidFees = (decimal)reader["PaidFees"];
                    IsActive = (bool)reader["IsActive"];
                    IssueReason = (byte)reader["IssueReason"];
                    CreatedByUserID = (int)reader["CreatedByUserID"];
                }
                reader.Close();
            }
            catch (Exception ex) { }
            finally { connection.Close(); }

            return IsFound;
        }

        static public DataTable GetAllLocalLicenses(int PersonID)
        {
            DataTable LocalLicenses = new DataTable();

            SqlConnection connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = @"
SELECT        Licenses.LicenseID, Licenses.ApplicationID, LicenseClasses.ClassName, Licenses.IssueDate, Licenses.ExpirationDate, Licenses.IsActive
FROM            Licenses INNER JOIN
                         LicenseClasses ON Licenses.LicenseClass = LicenseClasses.LicenseClassID
						 WHERE Licenses.ApplicationID in (select Applications.ApplicationID from Applications where ApplicantPersonID=@PersonID)";

            SqlCommand command = new SqlCommand(Query, connection);
            command.Parameters.AddWithValue("@PersonID", PersonID);
            try
            {
                connection.Open();

                SqlDataReader reader = command.ExecuteReader();

                if(reader.HasRows)
                {
                    LocalLicenses.Load(reader);
                }

            }
            catch (Exception ex) { }
            finally { connection.Close(); }

            return LocalLicenses;

        }

        static public bool IsTheLicenseExpired(int LicenseID)
        {
            DateTime ExpirationDate = DateTime.Now;

            SqlConnection connection = new SqlConnection(clsDataAccessSittings.ConnectionString);
            string Query = @"SELECT ExpirationDate  FROM Licenses WHERE LicenseID=@LicenseID";
            SqlCommand command= new SqlCommand(Query, connection);
            command.Parameters.AddWithValue("@LicenseID", LicenseID);

            try
            {
                connection.Open();

                object obj = command.ExecuteScalar();


                ExpirationDate = Convert.ToDateTime(obj);
            }
            catch (Exception ex) { }
            finally { connection.Close(); }

            int Result = DateTime.Compare(DateTime.Now, ExpirationDate);

            return Result > 0;
        }

        static public bool IsLicenseActive(int LicenseID)
        {
            bool IsActive = false;
            SqlConnection connction = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = @"SELECT IsActive FROM Licenses WHERE LicenseID=@LicenseID";

            SqlCommand command = new SqlCommand(Query, connction);

            command.Parameters.AddWithValue("@LicenseID", LicenseID);

            try
            {
                connction.Open();

                object obj = command.ExecuteScalar();

                if ((bool)obj == true)
                    IsActive = true;
            }
            catch (Exception ex) { }
            finally { connction.Close(); }

            return IsActive;
        }
        static public bool UpdateLicenseActivation(int LicenseID, bool IsActive)
        {
            int RowAffected = -1;

            SqlConnection connection = new SqlConnection(clsDataAccessSittings.ConnectionString);

            string Query = @"
UPDATE Licenses
   SET IsActive = @IsActive
 WHERE LicenseID=@LicenseID";

            SqlCommand command=new SqlCommand(Query, connection);
            command.Parameters.AddWithValue("@IsActive", IsActive);
            command.Parameters.AddWithValue("@LicenseID", LicenseID);

            try
            {
                connection.Open();

                RowAffected = command.ExecuteNonQuery();
            }
            catch (Exception ex) { }
            finally { connection.Close(); }

            return RowAffected > 0;

        }
    }
}
