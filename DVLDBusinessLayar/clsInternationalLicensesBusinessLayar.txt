using DVLDDataAccessLayar;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DVLDBusinessLayar
{

    /*
     * 
--InternationalLicenseID   int
--ApplicationID    int
--DriverID   int 
--IssuedUsingLocalLicenseID   int
--IssueDate   datetime
--ExpirationDate   datetime
--IsActive   bool 
--CreatedByUserID   int
     */
    public class clsInternationalLicensesBusinessLayar
    {
        enum enMode { AddNew,Update}
        private enMode _Mode { get; set; }
       public int InternationalLicenseID {get;set;}
       public int ApplicationID { get; set; }
       public int DriverID { get; set; }
       public int IssuedUsingLocalLicenseID { get; set; }
       public DateTime IssueDate { get; set; }
       public DateTime ExpirationDate {get;set;}
       public bool IsActive {get;set;}
       public int CreatedByUserID  {get;set;}

        public clsInternationalLicensesBusinessLayar()
        {

            this.InternationalLicenseID = 0;
            this.ApplicationID = 0;
            this.DriverID = 0;
            this.IssuedUsingLocalLicenseID = 0;
            this.IssueDate = DateTime.Now;
            this.ExpirationDate = DateTime.Now;
            this.IsActive = false;
            this.CreatedByUserID = 0;

            this._Mode= enMode.AddNew;
        }
        private clsInternationalLicensesBusinessLayar( int InternationalLicenseID, int ApplicationID,  int DriverID, 
            int IssuedUsingLocalLicenseID,  DateTime IssueDate,  DateTime ExpirationDate,  bool IsActive,  int CreatedByUserID)
        {
            this.InternationalLicenseID = InternationalLicenseID;
            this.ApplicationID=ApplicationID;
            this.DriverID= DriverID;
            this.IssuedUsingLocalLicenseID= IssuedUsingLocalLicenseID;
            this.IssueDate= IssueDate;
            this.ExpirationDate= ExpirationDate;
            this.IsActive= IsActive;
            this.CreatedByUserID = CreatedByUserID;

            this._Mode = enMode.Update;
        }

        static public clsInternationalLicensesBusinessLayar Find(int ApplicatonID)
        {

            int InternationalLicenseID = 0;
            int DriverID = 0;
            int IssuedUsingLocalLicenseID = 0;
            DateTime IssueDate = DateTime.Now;
            DateTime ExpirationDate = DateTime.Now;
            bool IsActive = false;
            int CreatedByUserID = 0;

            if (clsInternationalLicensesDataAccessLayar.Find(ref InternationalLicenseID, ApplicatonID, ref DriverID, ref IssuedUsingLocalLicenseID, ref IssueDate, ref ExpirationDate, ref IsActive, ref CreatedByUserID))
                return new clsInternationalLicensesBusinessLayar(InternationalLicenseID, ApplicatonID, DriverID, IssuedUsingLocalLicenseID, IssueDate, ExpirationDate, IsActive, CreatedByUserID);
            else
                return null;
        }
        static public clsInternationalLicensesBusinessLayar FindByDriverID(int DriverID)
        {
            int ApplicatonID = 0;
            int InternationalLicenseID = 0;
          
            int IssuedUsingLocalLicenseID = 0;
            DateTime IssueDate = DateTime.Now;
            DateTime ExpirationDate = DateTime.Now;
            bool IsActive = false;
            int CreatedByUserID = 0;

            if (clsInternationalLicensesDataAccessLayar.FindByDriver(ref InternationalLicenseID,ref ApplicatonID, DriverID, ref IssuedUsingLocalLicenseID, ref IssueDate, ref ExpirationDate, ref IsActive, ref CreatedByUserID))
                return new clsInternationalLicensesBusinessLayar(InternationalLicenseID, ApplicatonID, DriverID, IssuedUsingLocalLicenseID, IssueDate, ExpirationDate, IsActive, CreatedByUserID);
            else
                return null;
        }

        static public clsInternationalLicensesBusinessLayar FindByInternationalLicenseID(int InternationalLicenseID)
        {
            int ApplicatonID = 0;
         
            int DriverID = 0;
            int IssuedUsingLocalLicenseID = 0;
            DateTime IssueDate = DateTime.Now;
            DateTime ExpirationDate = DateTime.Now;
            bool IsActive = false;
            int CreatedByUserID = 0;

            if (clsInternationalLicensesDataAccessLayar.FindByInternatioalLicenseID( InternationalLicenseID, ref ApplicatonID,ref DriverID, ref IssuedUsingLocalLicenseID, ref IssueDate, ref ExpirationDate, ref IsActive, ref CreatedByUserID))
                return new clsInternationalLicensesBusinessLayar(InternationalLicenseID, ApplicatonID, DriverID, IssuedUsingLocalLicenseID, IssueDate, ExpirationDate, IsActive, CreatedByUserID);
            else
                return null;
        }

        private bool _AddNew()
        {
            int InternationalID = clsInternationalLicensesDataAccessLayar.AddNewInternationalLicense(this.ApplicationID, this.DriverID, this.IssuedUsingLocalLicenseID,
                this.IssueDate, this.ExpirationDate, this.IsActive, this.CreatedByUserID);
            if (InternationalID > 0) 
            {
                this.InternationalLicenseID = InternationalID;
                return true;
            }
            else
                return false;
        }

        public bool Save()
        {
            switch(this._Mode)
            {
                case enMode.AddNew:
                    if(_AddNew())
                    {
                        this._Mode = enMode.Update;
                        return true;
                    }
                    else
                        return false;
            }
            return false;
        }

        static public DataTable GetAllForInternationalLicenseApplication()
        {
            return clsInternationalLicensesDataAccessLayar.GetAllForInternationalLicenseApplication();
        }

        static public DataTable GetInternationalLicenseByPersonID(int PersonID)
        {
            return clsInternationalLicensesDataAccessLayar.GetInternationalLicenseByPersonID(PersonID);
        }
    }
}
